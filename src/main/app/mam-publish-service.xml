<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    
    <flow name="mhPublishServiceListenerFlow" initialState="started">
        <amqp:inbound-endpoint
        	queueName="${rabbit.requestqueue}"
        	queueDurable="true"
        	responseTimeout="10000"
        	connector-ref="InboundAMQPConnector"
        	doc:name="AMQP-0-9"/>
        <flow-ref name="parseMessageFlow" doc:name="parseMessageFlow"/>
        <flow-ref name="publishCallFlow" doc:name="publishCallFlow"/>
        <set-variable variableName="outcome" value="success" doc:name="Set outcome"/>
        <flow-ref name="publishResponse" doc:name="publishResponse"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.routing.filter.FilterUnacceptedException)]" doc:name="Catch FilterUnacceptedException">
                <set-variable variableName="message" value="#[(flowVars.message == null || flowVars.message.isEmpty() ? &quot;&quot; : flowVars.message + &quot; - &quot;) +  (flowVars.correlation_id == null || flowVars.correlation_id.isEmpty() ? &quot;correlation_id was not filled in&quot; : &quot;&quot;)]" doc:name="Append 'correlation_id was not filled in' to message"/>
                <set-variable variableName="message" value="#[(flowVars.message == null || flowVars.message.isEmpty() ? &quot;&quot; : flowVars.message + &quot; - &quot;) + (flowVars.fragment_id == null || flowVars.fragment_id.isEmpty() ? &quot;fragment_id was not filled in&quot; : &quot;&quot;)]" doc:name="Append 'fragment_id was not filled in' to message"/>
                <flow-ref name="publishResponse" doc:name="publishResponse"/>
                <logger level="ERROR" doc:name="The message was invalid" message="The message was invalid. #[flowVars.message]"/>
                <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.routing.RoutingException)]" doc:name="Catch Exception Strategy">
                <set-variable variableName="message" value="Failed to publish fragment" doc:name="Set message"/>
                <flow-ref name="publishResponse" doc:name="publishResponse"/>
                <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>
    <flow name="parseMessageFlow" processingStrategy="synchronous">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="originalMessage" value="#[payload]" doc:name="Set originalMessage"/>
        <set-variable variableName="type" value="request" doc:name="Set type"/>
        <flow-ref name="esPost" doc:name="esPost"/>
        <set-payload value="#[flowVars.originalMessage]" doc:name="Set Payload"/>
        <logger message="Received request: #[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="correlation_id" value="#[payload.correlation_id]" doc:name="Set correlation_id"/>
        <set-variable variableName="fragment_id" value="#[payload.fragment_id]" doc:name="Set fragment_id"/>
        <set-variable variableName="cp" value="#[payload.cp]" doc:name="Set cp"/>
        <message-filter throwOnUnaccepted="true" doc:name="Throw error when request is invalid">
            <and-filter>
                <expression-filter expression="#[flowVars.fragment_id != null &amp;&amp; !flowVars.fragment_id.isEmpty()]"/>
                <expression-filter expression="#[flowVars.correlation_id != null &amp;&amp; !flowVars.correlation_id.isEmpty()]"/>
                <expression-filter expression="#[flowVars.cp != null &amp;&amp; !flowVars.cp.isEmpty()]"/>
            </and-filter>
        </message-filter>
    </flow>
    <sub-flow name="publishCallFlow">
        <set-variable variableName="basic_credentials" value="#[&quot;viaa@&quot; + flowVars.cp + ':' + '${mh.password}']" doc:name="Set basic_credentials"/>
        <set-attachment attachmentName="value" value="true" contentType="application/json" doc:name="Attachment"/>
        <http:request config-ref="MediahavenAPI" path="/#[flowVars.fragment_id]/publish" method="POST" doc:name="Publish asset">
            <http:request-builder>
                <http:header headerName="Authorization" value="#['Basic ' + org.apache.commons.codec.binary.Base64.encodeBase64String(flowVars.basic_credentials.getBytes())]"/>
            </http:request-builder>
            <http:success-status-code-validator values="204,403"/>
        </http:request>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <choice doc:name="Is item already published?">
            <when expression="#[payload.message == &quot;Item is already published&quot;]">
                <expression-component doc:name="Do nothing"><![CDATA[// Do nothing]]></expression-component>
            </when>
            <otherwise>
                <until-successful maxRetries="5" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
                    <flow-ref name="checkIfPublishedSubFlow" doc:name="checkIfPublishedSubFlow"/>
                </until-successful>
            </otherwise>
        </choice>
        <logger level="INFO" doc:name="Logger"/>
        <logger message="Successfully published #[flowVars.fragment_id]" level="INFO" doc:name="Successfully published fragment_id"/>
    </sub-flow>
    <sub-flow name="checkIfPublishedSubFlow">
        <http:request config-ref="MediahavenAPI" path="/#[flowVars.fragment_id]" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Authorization" value="#['Basic ' + org.apache.commons.codec.binary.Base64.encodeBase64String(flowVars.basic_credentials.getBytes())]"/>
            </http:request-builder>
            <http:success-status-code-validator values="404"/>
        </http:request>
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/json_1.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload.mdProperties filter ($.attribute == 'isiningestspace'))[0].value]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Is isiningestspace == 0?">
            <when expression="#[payload == 0]">
                <expression-component doc:name="Do nothing"><![CDATA[// Do nothing]]></expression-component>
            </when>
            <otherwise>
                <expression-component doc:name="Throw exception"><![CDATA[throw new java.lang.RuntimeException("Fragment is not published");]]></expression-component>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="publishResponse" processingStrategy="synchronous">
        <dw:transform-message doc:name="Make queue creation request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"auto_delete":false,
	"durable":true,
	"arguments":{}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="RabbitMQAPI" path="/queues/#[java.net.URLEncoder.encode('${rabbit.vhost}', &quot;UTF-8&quot;)]/${rabbit.responsequeue}" method="PUT" doc:name="Create queue"/>
        <dw:transform-message doc:name="Make response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	correlation_id: flowVars.correlation_id when (flowVars.correlation_id != null or flowVars.correlation_id != '') otherwise 'unknown',
	fragment_id: flowVars.fragment_id when (flowVars.fragment_id != null or flowVars.fragment_id != '') otherwise 'unknown',
	outcome: flowVars.outcome when flowVars.outcome? otherwise 'failed',
	message: flowVars.message when flowVars.message? otherwise ''
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <set-variable variableName="type" value="response" doc:name="Set type"/>
        <scatter-gather doc:name="Scatter-Gather">
            <amqp:outbound-endpoint queueName="${rabbit.responsequeue}" responseTimeout="10000" connector-ref="OutboundAMQPConnector" doc:name="Publish response"/>
            <flow-ref name="esPost" doc:name="esPost"/>
        </scatter-gather>
        <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
    </flow>
    <sub-flow name="esPost">
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/json.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	(payload mapObject {'$$':$}),
	timestamp: now,
	type: flowVars.type
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <http:request config-ref="ES" path="/${es.index}/debug" method="POST" doc:name="POST to ES"/>
    </sub-flow>
</mule>
